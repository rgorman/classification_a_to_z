{
    "collab_server" : "",
    "contents" : "---\ntitle: \"From Treebank to Classification Testing\"\noutput: html_notebook\n---\n\n\n\n## XML Pre-processing (This section describes how XML treebank files are prepared for analysis.)\n\n\n\n\n####  The first steps of pre-processing involve eXtensible Stylesheet Language Transformations (XSLT) which are implemented using the oXygen XML editor. Theoretically, it may be possible to use R with the package \"xslt\".\n\n***\n\n\n##### Note on file location: XSLT files are located in the \"XSLT_files\" subdirectory within the present working directory.\n\n\n***\n\n**General Notes:**\n\n* Many XML treebanks of individual works have been subdivided into parts, since the Perseids interface (http://sosol.perseids.org/sosol/) bogs down with files containing many more than one hundred sentences. As a result, there may be more than one series of sentence-level id attributes for a given treebank. This situations calls for the files to be consolidated and a single series of sentence id attributes to be generated.\n\n    + Create a XML file to hold all parts of a given work and copy the first file of the work into it.\n    + Add a \"comment\" element just after the \"date\" element at the top of the file. As the body of the \"comment\" element, insert the form of the standard reference for the work, for example, \"Herodotus Book 1\". This information will be used to add human readable references to all sentences and words in the file. This step makes debugging easier in later stages of data processing.\n    + Add each additional part of the work's treebank to the end of the new XML file.\n    + Run the XSLT script called \"renumber_sent_consolidated_files.xsl\" on the new XML file. Each sentence in the output file will contain an attribute called \"consolidated_sent_id\". **Note Well: the output directory must be set correctly for each XSLT script.**\n    \n* Human readable metadata is now added to each sentence and word element.\n\n     + On the output of the preceding XSLT, run the XSLT called \"stand_ref_to_sent.xsl\". This step will create an sentence attribute called \"stand_ref\" and insert the text of the \"comment\" element into this attribute, for example, \"Aeschines Oration 1: s-1\".\n     + On the output of the preceding XSLT file, run the XSLT called \"stand_ref_to_word.xsl\". This step will create for each word and attribute called \"cite\" and insert human readable metadata for sentence and word, for example, \"Aeschines Oration 1: s-677 w-4\".\n     \n* All files should be checked for missing values in any word attributes. **Such missing data may cause the code to break at a later step.** \n\n    + Using the oXygen XML editor, use the \"search and replace in files funciton\" replace any empty quotation markes with \"missing_value\" or the like.\n    \n* Some of the older files in the Perseus Treebank contain features which will break later stages of the code. These features should be removed:\n\n    + On the target XML files, run the XSLT called \"XSEG_removal.xsl\". The attribute relation=\"XSEG\" was a way to handle tokens improperly divided by the tokenizer. This method is no longer necessary, since the Arethusa/Alpheios platform now allows easy re-tokenization. The XSEG tag should therefore be avoided. **The code \"XSEG_removal.xsl\" will remove any sentence element containing a word with a relation attribute with the value \"XSEG\".**\n    + On the result of the preceding output, run the XSLT called \"bad_numbering removal.xsl\". Some older treebank files contain sentences in which the maximum value of the word id attributes does not match the number of tokens in the sentence. For example, a sentence might contain 10 word elements, but the id attribute of the last word in the sentence has the id value of 11. Such sentences will cause subsequent code to break. **The code \"bad_numbering_removal.xsl\" will remove any sentence element which has this unwanted characteristic.**\n    \n* These files are now ready for the next stage of processes sing, which add some basic data about word order as attributes to each word. This process is relatively complicated.\n\n***\n***\n\n**Notes on the XSLT scripts:\n\n```{r eval=FALSE}\n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<xsl:stylesheet xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\"\n    xmlns:xs=\"http://www.w3.org/2001/XMLSchema\"\n    exclude-result-prefixes=\"xs\"\n    version=\"2.0\">\n    \n    <xsl:output method=\"xml\" indent=\"yes\"/>\n    \n    <xsl:template match=\"node() | @*\">\n        <xsl:copy>\n            <xsl:apply-templates select=\"node() | @*\"/>\n        </xsl:copy>\n    </xsl:template>\n    \n    <xsl:template match=\"sentence\">\n        <sentence>\n            <xsl:copy-of select=\"./@*\"></xsl:copy-of>\n            <xsl:attribute name=\"consolidated_sent_id\"><xsl:number></xsl:number></xsl:attribute>\n            <xsl:copy-of select=\"./node()\"></xsl:copy-of>\n        </sentence>\n    </xsl:template>\n    \n</xsl:stylesheet>\n\n```\nThe above code block is \"renumber_sent_consolidated_files.xsl\".  **Note that it will not execute from this R Notebook.**\n\n* All XSLT scripts are themselves XML code and must have a header with the appropriate code,, e.g., \"\\<?xml version=\"1.0\" encoding=\"UTF-8\"?>\"\n* The second element (\"xsl:stylesheet ...\") is standard boilerplate for XSLT.\n* The third element (xsl:output ...) is used to produce a more readable XML document as output.\n* The essential workings of the script begin with the first template element. This template is sometimes referred to as the \"standard identity transformation.\" Its function is to replicate all material in the target XML file in the output file.\n\n    + The attribute match attribute identifies the parts of the target XML on which the template should operate. Here the value of the match attribute is set to operate on all parts of the target file. The code **node()** indicates any XML element The code **@\\*** indicates any XML attribute.  The two are joined with the pipe operator (|) meaning \"or,\" and the resulting attribute will apply the template to all content of the target document.\n    + The operational part of this template is the copy element. This element will copy material in the target file as directed by the apply-templates element. The apply-templates element also calls other applicable templates (such as the second template here). The result is a reproduction of the target document with the changes applied by the other templates called.\n    \n* The second template element, through its **match** attribute, applies to every sentence element in the target file. When applied, it creates a new **sentence** element containing the results of these transformations:   \n\n    + The **copy-of** element makes a \"deep copy\" (i.e., a copy that includes children) of the material indicated by the **select** attribute. Here the period indicates the current element and the **/@\\*** indicates all attributes of the relevant element. **The code thus preserves sentence attributes from the target file.**\n    + The **attribute** element creates a new attribute, whose name is given by the **name** attribute. \n    + The value of the new attribute is created by the embedded **number** element. This element returns the integer position of the current node (here the current sentence element). *The result is a new sentence attribute caled \"consolidated_sent_id\" with a value of the integer position of the sentence, without regard to its original sentence id attribute.**\n    + The second **copy-of** element applies, through its **select** attribute, to all child elments of the current sentence node. Here, it copies into the output document all a sentence's word elements and their attributes.\n    \n***\n```{r eval=FALSE}\n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<xsl:stylesheet xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\"\n    version=\"2.0\">\n    <xsl:output method=\"xml\" indent=\"yes\"/>\n    \n    \n    <xsl:template match=\"@* | node()\">\n        <xsl:copy>\n            <xsl:apply-templates select=\"@* | node()\"/>\n        </xsl:copy>\n    </xsl:template>\n    \n    \n    <xsl:template match=\"sentence\">\n        <xsl:variable name=\"reference\">\n            <xsl:value-of select=\"//comment\"/>\n        </xsl:variable>\n        \n           <sentence>\n               <xsl:attribute name=\"stand_ref\">\n                   <xsl:value-of select=\"$reference\"/>: s-<xsl:value-of select=\"./@id\"/>\n               </xsl:attribute>\n               \n               <xsl:attribute name=\"stand_ref\">\n                   <xsl:value-of select=\"$reference\"/>: s-<xsl:value-of select=\"./@consolidated_sent_id\"/>\n               </xsl:attribute>\n               \n               <xsl:copy-of select=\"./node() | ./@*\"></xsl:copy-of>\n           </sentence> \n    </xsl:template>\n    \n</xsl:stylesheet>\n\n```\n\nThe above code block is \"stand_ref_to_sent.xsl\".  **Note that it will not execute from this R Notebook.**\n\n* The first template is the standard \"identity transformation\" and replicates all material in the original XML and also applies changes as indicated in other relevant templates.\n* The second template applies to all sentence elements through its **match** attribute. It creates new **sentence** elements containing the results of these transformations:\n\n    + The **variable** element creates a variable named \"reference\" and, through the embedded **value-of** element populates the variable with the human-readable bibliographical data from the file's **comment** element.\n    + The first **attribute** element generates a sentence attributed called \"stand_ref\". Its value is drawn from the **reference** variable combined with the value of the sentence's **id** attribute.\n    \n* The third template is identical to the second except that it uses each sentence's **consolidated_sent_id** attribute to generate the value for the new attribute. Because, where the **id** and the **consolidated_sent_id** differ, the latter should be used, the **attribute** elements are ordered so as to give the consolidated sentence number the last word.   \n    \n***\n\n```{r eval=FALSE}\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<xsl:stylesheet xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\"\n    xmlns:xs=\"http://www.w3.org/2001/XMLSchema\"\n    exclude-result-prefixes=\"xs\"\n    version=\"2.0\">\n    \n    <xsl:template match=\"@* | node()\">\n        <xsl:copy>\n            <xsl:apply-templates select=\"@* | node()\"/>\n        </xsl:copy>\n    </xsl:template>\n    \n    <xsl:template match=\"word\">\n        <word>\n            <xsl:copy-of select=\"@*\"/>\n            <xsl:attribute name=\"cite\"><xsl:value-of select=\"parent::sentence/@stand_ref\"/> w-<xsl:value-of select=\"./@id\"/></xsl:attribute>\n        </word>\n        \n    </xsl:template>\n</xsl:stylesheet>\n\n\n```\n\nThe above code block is \"stand_ref_to_word.xsl\".  **Note that it will not execute from this R Notebook.**\n\n\n\n### Adding word order data as attributes\n\n\n\n\n",
    "created" : 1510419776130.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "4179534115",
    "id" : "CD3A7A33",
    "lastKnownWriteTime" : 1510596957,
    "last_content_update" : 1510596957731,
    "path" : "~/SyntaxMetrics/R_files/code/combinations/Full_instructions.Rmd",
    "project_path" : "Full_instructions.Rmd",
    "properties" : {
        "chunk_output_type" : "inline",
        "ignored_words" : "treebanks,Perseids,treebank,xsl,Aeschines,Treebank\n",
        "tempName" : "Untitled1"
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_markdown"
}